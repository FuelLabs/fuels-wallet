name: "PR Checks"

on:
  pull_request:
    types: [opened, synchronize, edited, closed, reopened]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  validate-title:
    name: Validate PR Title
    runs-on: ubuntu-latest
    steps:
      - uses: amannn/action-semantic-pull-request@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  check-packages-changed:
    name: Assign project changed
    runs-on: ubuntu-latest
    outputs:
      changed: ${{ steps.packages-changed.outputs.any_changed }}
    steps:
      - uses: actions/checkout@v4
      - name: Check external packages changes
        id: packages-changed
        uses: tj-actions/changed-files@v22.2
        with:
          files: |
            **/packages/app/**
            **/packages/types/**
            **/packages/react/**

  validate-changeset:
    name: Validate PR Changeset
    needs: check-packages-changed
    if: ${{ github.head_ref != 'changeset-release/master' && needs.check-packages-changed.outputs.changed == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract pnpm version from .tool-versions
        id: get_pnpm
        run: |
          PNPM_VERSION=$(grep '^pnpm' .tool-versions | awk '{print $2}')
          echo "PNPM_VERSION=${PNPM_VERSION}" >> $GITHUB_ENV

      - name: CI Setup
        uses: FuelLabs/github-actions/setups/node@58bcd91d7246e40938e1971be0b0fe35b253dff0
        with:
          node-version: 20.11.0
          pnpm-version: ${{ env.PNPM_VERSION }}

      - name: Validate Changeset
        run: pnpm changeset status --since=origin/${{ github.base_ref }}

  validate-checklist:
    name: Validate PR Checklist Completion
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Check that all checklist items are complete
        uses: actions/github-script@v6
        with:
          script: |
            (async () => {
              const fs = require('fs');
              const path = require('path');

              // Obtain the PR body from the event payload
              const pr = context.payload.pull_request;
              const prBody = pr.body || "";

              // Define the template file path relative to the workspace.
              // We expect that the checked out branch contains an up-to-date PR template.
              const templateFilePath = path.join(process.cwd(), "fuels-wallet/.github/pull_request_template.md");
              let templateContent = "";

              if (fs.existsSync(templateFilePath)) {
                // Load from current checkout.
                templateContent = fs.readFileSync(templateFilePath, { encoding: "utf8" });
                console.log("Template loaded from current checkout.");
              } else {
                // Fallback: use GitHub API to fetch the template (from main branch, for example).
                console.log("Template not found locally; falling back to GitHub API.");
                const response = await github.rest.repos.getContent({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  path: "fuels-wallet/.github/pull_request_template.md",
                });
                const buff = Buffer.from(response.data.content, 'base64');
                templateContent = buff.toString('utf8');
              }

              // Count the checklist items in the template
              const templateCheckboxMatches = templateContent.match(/-\s*\[\s*\]/g) || [];
              const expectedCount = templateCheckboxMatches.length;
              console.log(`Expected checklist count from template: ${expectedCount}`);

              // Count the completed checkboxes in the PR body
              const prCheckedMatches = prBody.match(/-\s*\[[xX]\]/g) || [];
              const checkedCount = prCheckedMatches.length;
              console.log(`Checked checkbox count in PR: ${checkedCount}`);

              if (checkedCount < expectedCount) {
                const errorMessage = `❌ Incomplete checklist: expected ${expectedCount} completed items, but found ${checkedCount}. Please complete all checklist items in the PR template.`;
                await github.rest.pulls.createReview({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: pr.number,
                  event: "REQUEST_CHANGES",
                  body: errorMessage
                });
                throw new Error(errorMessage);
              } else {
                console.log("All checklist items have been completed.");
              }
            })().catch(error => {
              console.error(error);
              throw error;
            });

  verify-issue-reference:
    name: Validate PR Issue References
    runs-on: ubuntu-latest
    steps:
      - name: Check for GitHub and Linear issue references
        uses: actions/github-script@v6
        with:
          script: |
            (async () => {
              const pr = context.payload.pull_request;
              const prBody = pr.body || "";
              // Regex for a GitHub issue reference, for example "Closes #123"
              const githubIssueRegex = /#\d+/;
              // Regex for a Linear issue reference, for example "FE-123"
              const linearIssueRegex = /FE-\d+/;

              const githubIssueMatch = prBody.match(githubIssueRegex);
              const linearIssueMatch = prBody.match(linearIssueRegex);
              let missingRefs = [];

              if (!githubIssueMatch) {
                missingRefs.push("GitHub Issue (e.g., Closes #123)");
              }
              if (!linearIssueMatch) {
                missingRefs.push("Linear Issue (e.g., FE-123)");
              }

              if (missingRefs.length > 0) {
                const errorMessage = "❌ Missing required references: " + missingRefs.join(" and ") + ". Please include both a GitHub and a Linear issue reference in your PR description.";
                await github.rest.pulls.createReview({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: pr.number,
                  event: "REQUEST_CHANGES",
                  body: errorMessage
                });
                throw new Error("Missing required issue references in the PR description.");
              } else {
                console.log("Both GitHub and Linear issue references are present in the PR.");
              }
            })().catch(error => {
              console.error(error);
              throw error;
            });

  audit:
    name: Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Extract pnpm version from .tool-versions
        id: get_pnpm
        run: |
          PNPM_VERSION=$(grep '^pnpm' .tool-versions | awk '{print $2}')
          echo "PNPM_VERSION=${PNPM_VERSION}" >> $GITHUB_ENV
      - uses: FuelLabs/github-actions/setups/node@master
        with:
          node-version: 20.11.0
          pnpm-version: ${{ env.PNPM_VERSION }}
      - name: Install jq
        run: sudo apt-get install jq
      - run: |
          pnpm audit --prod --json | jq '
            .advisories | to_entries |
            map(select(.value.patched_versions != "<0.0.0" and .value.severity == "critical") | {package: .value.module_name, vulnerable: .value.vulnerable_versions, fixed_in: .value.patched_versions})
          ' > audit_fix_packages.json
          if [ "$(jq 'length' audit_fix_packages.json)" -gt "0" ]; then
            echo "Actionable vulnerabilities found in the following packages:"
            jq -r '.[] | "\u001b[1m\(.package)\u001b[0m vulnerable in \u001b[31m\(.vulnerable)\u001b[0m fixed in \u001b[32m\(.fixed_in)\u001b[0m"' audit_fix_packages.json | while read -r line; do echo -e "$line"; done
            echo "Please run \`pnpm --prod --fix\`"
            exit 1
          else
            echo "No actionable vulnerabilities"
            exit 0
          fi

  strict-audit:
    name: Strict Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Extract pnpm version from .tool-versions
        id: get_pnpm
        run: |
          PNPM_VERSION=$(grep '^pnpm' .tool-versions | awk '{print $2}')
          echo "PNPM_VERSION=${PNPM_VERSION}" >> $GITHUB_ENV
      - uses: FuelLabs/github-actions/setups/node@master
        with:
          node-version: 20.11.0
          pnpm-version: ${{ env.PNPM_VERSION }}
      - run: pnpm audit --prod

  lint:
    name: Lint
    runs-on: ubuntu-latest
    permissions:
      checks: write
      pull-requests: write
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Extract pnpm version from .tool-versions
        id: get_pnpm
        run: |
          PNPM_VERSION=$(grep '^pnpm' .tool-versions | awk '{print $2}')
          echo "PNPM_VERSION=${PNPM_VERSION}" >> $GITHUB_ENV

      - name: Setup Node
        uses: FuelLabs/github-actions/setups/node@master
        with:
          node-version: 20.11.0
          pnpm-version: ${{ env.PNPM_VERSION }}

      - name: Run lint
        run: |
          pnpm ts:check
          pnpm lint:ci

  docs:
    name: Docs
    uses: FuelLabs/github-actions/.github/workflows/next-docs.yml@master
    with:
      doc-folder-path: "packages/docs/docs"
      src-folder-path: "packages/docs/src"
      spellcheck-config-path: "packages/docs/.spellcheck.yml"
